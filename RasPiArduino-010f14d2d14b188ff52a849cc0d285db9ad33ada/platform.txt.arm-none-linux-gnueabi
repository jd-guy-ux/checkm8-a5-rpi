name=RaspberryPi
version=0.0.1

# Toolchain Location
runtime.tools.toolchain.path={runtime.platform.path}/tools/arm-none-linux-gnueabi
runtime.tools.toolchain.prefix=arm-none-linux-gnueabi-

compiler.path={runtime.tools.toolchain.path}/bin/
compiler.c.cmd={runtime.tools.toolchain.prefix}gcc
compiler.cpp.cmd={runtime.tools.toolchain.prefix}g++
compiler.S.cmd={runtime.tools.toolchain.prefix}gcc
compiler.c.elf.cmd={runtime.tools.toolchain.prefix}g++
compiler.as.cmd={runtime.tools.toolchain.prefix}as
compiler.ar.cmd={runtime.tools.toolchain.prefix}ar
compiler.objcopy.cmd={runtime.tools.toolchain.prefix}objcopy
compiler.size.cmd={runtime.tools.toolchain.prefix}size

compiler.cpreprocessor.flags="-I{runtime.platform.path}/tools/compat/include" -D_GNU_SOURCE
compiler.c.flags=-c -O3 -MD -Wall -Winline -pipe
compiler.cpp.flags=-c -O3 -MD -Wall -Winline -pipe
compiler.S.flags=-c -g -x assembler-with-cpp -MMD -mlongcalls
compiler.ar.flags=cru
compiler.c.elf.flags=
compiler.c.elf.libs=-lpthread -lm
compiler.objcopy.flags=
compiler.objcopy.eep.flags=

# This can be overriden in boards.txt
build.extra_flags=-DRASPI

# These can be overridden in platform.local.txt
compiler.c.extra_flags=
compiler.c.elf.extra_flags=
compiler.S.extra_flags=
compiler.cpp.extra_flags=
compiler.ar.extra_flags=
compiler.objcopy.extra_flags=
compiler.objcopy.eep.extra_flags=

## Compile c files
recipe.c.o.pattern="{compiler.path}{compiler.c.cmd}" {compiler.cpreprocessor.flags} {compiler.c.flags} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.c.extra_flags} {build.extra_flags} {includes} "{source_file}" -o "{object_file}"

## Compile c++ files
recipe.cpp.o.pattern="{compiler.path}{compiler.cpp.cmd}" {compiler.cpreprocessor.flags} {compiler.cpp.flags} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {includes} "{source_file}" -o "{object_file}"

## Compile S files
recipe.S.o.pattern="{compiler.path}{compiler.c.cmd}" {compiler.cpreprocessor.flags} {compiler.S.flags} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.c.extra_flags} {build.extra_flags} {includes} "{source_file}" -o "{object_file}"

## Create archives
recipe.ar.pattern="{compiler.path}{compiler.ar.cmd}" {compiler.ar.flags} {compiler.ar.extra_flags} "{build.path}/arduino.ar" "{object_file}"

## Combine gc-sections, archives, and objects
recipe.c.combine.pattern="{compiler.path}{compiler.c.elf.cmd}" -o "{build.path}/{build.project_name}.hex" {compiler.c.elf.flags} {compiler.c.elf.extra_flags} -Wl,--start-group {object_files} "{build.path}/arduino.ar" {compiler.c.elf.libs} -Wl,--end-group "-L{build.path}"

## Create hex
#recipe.objcopy.hex.pattern="{compiler.path}{compiler.objcopy.cmd}" {compiler.objcopy.flags} {compiler.objcopy.extra_flags} "{build.path}/{build.project_name}.elf" "{build.path}/{build.project_name}.hex"
recipe.objcopy.hex.pattern=

## Create eeprom
recipe.objcopy.eep.pattern=

## Save hex
recipe.output.tmp_file={build.project_name}.hex
recipe.output.save_file={build.project_name}.{build.variant}.bin

## Compute size
recipe.size.pattern="{compiler.path}{compiler.size.cmd}" -A "{build.path}/{build.project_name}.hex"
recipe.size.regex=^(?:\.text|\.bss|\.rodata|)\s+([0-9]+).*
recipe.size.regex.data=^(?:\.data|\.rodata|\.bss)\s+([0-9]+).*
#recipe.size.regex.eeprom=^(?:\.eeprom)\s+([0-9]+).*

# ------------------------------

tools.scp.cmd=echo
tools.scp.cmd.windows=echo
tools.scp.upload.protocol=esp
tools.scp.upload.params.verbose=-vv
tools.scp.upload.params.quiet=
tools.scp.upload.pattern="{cmd}" "Upload" "{build.path}/{build.project_name}.hex"
